// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bgoldovsky/counter-api/internal/services (interfaces: Counter)

// Package mock_services is a generated GoMock package.
package mock

import (
	models "github.com/bgoldovsky/counter-api/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCounter is a mock of Counter interface
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Inc mocks base method
func (m *MockCounter) Inc() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inc")
	ret0, _ := ret[0].(error)
	return ret0
}

// Inc indicates an expected call of Inc
func (mr *MockCounterMockRecorder) Inc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockCounter)(nil).Inc))
}

// State mocks base method
func (m *MockCounter) State() models.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(models.State)
	return ret0
}

// State indicates an expected call of State
func (mr *MockCounterMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockCounter)(nil).State))
}
